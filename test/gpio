#!/usr/bin/env ruby

require_relative '../gpio'

require 'minitest/spec'
require 'minitest/autorun'

TEST_PIN = ENV['GPIO_TEST_PIN'] || 23
TEST_PIN2 = ENV['GPIO_TEST_PIN2'] || 24

describe GPIO do
  TIMES = 10
  TIMEOUT = 0.1
  before do
    @gpio = GPIO.new TEST_PIN
    @gpio2 = GPIO.new TEST_PIN2
    @gpio.export
    @gpio2.export
  end
  after do
    @gpio.unexport
    @gpio2.unexport
  end
  it "is exported" do
    @gpio.must_be :exported?
  end
  it "can set direction in" do
    @gpio.set_input
    @gpio.must_be :input?
    @gpio.wont_be :output?
  end
  it "can set direction out and low" do
    @gpio.set_output_low
    @gpio.must_be :output?
    @gpio.must_be :low?
  end
  it "can set direction out and high" do
    @gpio.set_output_high
    @gpio.must_be :output?
    @gpio.must_be :high?
  end
  it "can set value" do
    @gpio.set_output_low
    TIMES.times do
      @gpio.set_high
      @gpio.must_be :high?
      @gpio.set_low
      @gpio.must_be :low?
    end
  end
  def square_wave(gpio)
    gpio.set_output_low
    queue = Queue.new
    thread = Thread.new do
      loop do
        break if queue.pop == :exit
        gpio.high? ? gpio.set_low : gpio.set_high
      end
    end
    [queue, thread]
  end
  def edge_test(gpio)
    queue, thread = square_wave gpio
    ready = lambda{|v| v.must_equal false; queue.push :trigger}
    count = TIMES
    gpio.poll(ready:ready, timeout:TIMEOUT) do |v|
      yield v
      count-=1; break if count.zero?
      queue.push :trigger
    end
    queue.push :exit; thread.join
  end
  it "can trigger on none" do
    @gpio.set_edge_none
    @gpio.must_be :edge_none?
    edge_test(@gpio) {|v| v.must_be_nil}
  end
  it "can trigger on rising" do
    @gpio.set_edge_rising
    @gpio.must_be :edge_rising?
    edge_test(@gpio) {|v| @gpio.high? ? v.must_equal(true) : v.must_be_nil}
  end
  it "can trigger on falling" do
    @gpio.set_edge_falling
    @gpio.must_be :edge_falling?
    edge_test(@gpio) {|v| @gpio.high? ? v.must_be_nil : v.must_equal(false)}
  end
  it "can trigger on both" do
    @gpio.set_edge_both
    @gpio.must_be :edge_both?
    edge_test(@gpio) {|v| v.must_equal @gpio.high?}
  end
  it "can trigger on multiple" do
    @gpio.set_edge_both
    @gpio2.set_edge_both
    queue, thread = square_wave @gpio
    queue2, thread2 = square_wave @gpio2
    ready = lambda{|g2v| g2v.values{|v|v.must_equal false}; queue.push :trigger}
    count = TIMES
    GPIO.poll([@gpio, @gpio2], ready:ready, timeout:TIMEOUT) do |g2v|
      g2v.wont_be_nil
      g2v.each{|g,v| v.must_equal g.high?}
      count-=1; break if count.zero?
      g2v.each{|g,v| g==@gpio ? queue2.push(:trigger) : queue.push(:trigger)}
    end
    queue.push :exit; queue2.push :exit; thread.join; thread2.join
  end
end
